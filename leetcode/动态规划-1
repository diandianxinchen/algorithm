#### 怎么理解动态规划
- 递归 + 记忆化 -> 递推
- 状态的定义
- 状态转移方程
- 最优子结构

#### Leetcode 70 爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

```
public class T70 {
    public int climbStairs(int n) {
        if(n ==1 || n ==2){
            return n;
        }
        int[] f = new int[n+1];
        f[1] = 1;
        f[2] = 2;
        for(int i = 3; i <= n; i++){
            f[i] = f[i-1] + f[i-2];
        }
        return f[n];
    }
}
```

#### 120. 三角形最小路径和
给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。

```
public class T120 {
    /**
     * dp[i,j] = min(dp[i+1,j],dp[i+1,j+1]) + triangle[i,j]
     */
    public int minimumTotal(List<List<Integer>> triangle) {
        int size = triangle.size();
        int[][] dp = new int[size][size];
        List<Integer> integers = triangle.get(size - 1);
        for (int i = 0; i < size; i++) {
            dp[size - 1][i] = integers.get(i);
        }
        for (int i = size - 1; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle.get(i).get(j);
            }
        }
        return dp[0][0];
    }
}
```

#### LeetCode 152 乘积最大子数组
给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

```
class Solution {
    public int maxProduct(int[] nums) {
        /**
         * dp[i][0] 标识已i位结尾的 最大值
         * dp[i][1] 标识已i位结尾的 最小值
         *
         * dp[i+1][0] = max(dp[i][0] * a[i+1], a[i+1])   a[i+1] > 0
         *              min(dp[i][1] * a[i+1], a[i+1])   a[i+1] < 0
         *
         * dp[i+1][1] = max(dp[i][0] * a[i+1], a[i+1])  a[i+1] < 0
         *              min(dp[i][1] * a[i+1], a[i+1])  a[i+1] > 0
         *
         */
        int size = nums.length;
        int[][] dp = new int[size][2];
        dp[0][0] = nums[0];
        dp[0][1] = nums[0];
        int res = nums[0];
        for (int i = 1; i < size; i++) {
            if (nums[i] > 0) {
                dp[i][0] = Math.max(dp[i - 1][0] * nums[i], nums[i]);
                dp[i][1] = Math.min(dp[i - 1][1] * nums[i], nums[i]);
            }
            if (nums[i] < 0) {
                dp[i][0] = Math.max(dp[i - 1][1] * nums[i], nums[i]);
                dp[i][1] = Math.min(dp[i - 1][0] * nums[i], nums[i]);
            }
            if(dp[i][0] > res){
                res = dp[i][0];
            }
        }
        return res;
    }
}
```

#### LeetCode 121. 买卖股票的最佳时机
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。

只能进行一次交易，当前价格减去之前价格的最小值就是当前可以获取的最大利润

```
public class T121 {
    public int maxProfit(int[] prices) {
        if(prices.length == 0){
            return 0;
        }
        int min = prices[0];
        int res = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] - min > res) {
                res = prices[i] - min;
            }
            if (prices[i] < min) {
                min = prices[i];
            }
        }
        return res;
    }
}
```

#### 122 买卖股票的最佳时机 II
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

只要后一天比前一天价格高就买入

```
public class T122 {
    public int maxProfit(int[] prices) {
        int res = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            int abs = prices[i + 1] - prices[i];
            if (abs > 0) {
                res += abs;
            }
        }
        return res;
    }
}
```

#### 变题
只能交易K次
定义M[i],表示第i天的最大利润

```
M[i] = M[i - 1] + a[i] 第i天卖出
     = M[i - 1] - a[i] 第i天买入

需要知道当前是否可以进入 买入/卖出
所以需要用一个值来保存状态
用j = 0 表示当前不持有股票 -> 只能进行买入操作
用j = 1 表示当前持有股票 -> 只能进行卖出操作
状态转移方程变为
M[i][0] = M[i-1][0]   不持有股票不进行操作
        = M[i-1][1] + a[i]   将持有的股票卖出
M[i][1] = M[i-1][1]   原本就持有股票，不进行操作
        = M[i-1][0] - a[i]   原本不持有股票，进行买入

现在我们有了股票买入/卖出的状态，但是有交易次数限制的情况还是无法求解
所以需要有一个值来保存已进行的交易次数
用k 来表示已进行的交易次数
M[i][k][j]

M[i][k][0] = M[i-1][k][0]
           = M[i-1][k-1][1] + a[i]
M[i][k][1] = M[i-1][k][1]
           = M[i-1][k-1][0] - a[i] 需要判断k的值,如果购买次数用完，不能继续购买
```
```
class Solution {
    public int maxProfit(int[] prices) {
        int size = prices.length;
        int[][][] mp = new int[size][3][2];
        int res = 0;
        // 第一天不进行买入
        mp[0][0][0] = 0;
        // 第一天进行买入
        mp[0][1][1] = -prices[0];
        // 不存在的情况
        mp[0][1][0] = -prices[0];
        mp[0][2][0] = -prices[0];
        mp[0][2][1] = -prices[0];
        for (int i = 1; i < size; i++) {
            for (int k = 0; k <= 2; k++) {
                mp[i][k][0] = k - 1 >= 0 ? Math.max(mp[i - 1][k][0], mp[i - 1][k][1] + prices[i]) : mp[i - 1][k][0];
                mp[i][k][1] = k - 1 >= 0 ? Math.max(mp[i - 1][k][1], mp[i - 1][k - 1][0] - prices[i]) : mp[i - 1][k][1];
                if (mp[i][k][0] > res) {
                    res = mp[i][k][0];
                }
            }
        }
        return res;
    }
}
```
#### 300 最长上升子序列
给定一个无序的整数数组，找到其中最长上升子序列的长度

定义dp[i]表示已a[i]结尾的最长上升子序列的长度

dp[i] = 取满足a[i] > a[j]的最大dp[j] + 1

```
class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int[] dp = new int[nums.length];
        dp[0] = 1;
        int res = dp[0];
        for (int i = 1; i < nums.length; i++) {
            int max = 0;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    if (dp[j] > max) {
                        max = dp[j];
                    }
                }
            }
            dp[i] = max + 1;
            if (dp[i] > res) {
                res = dp[i];
            }
        }
        return res;
    }
}
```

另一个解法 O(nlogn)
- 维护一个数组 LIS
- for i : 0 -> n-1 插入到LIS
```
对于a插入到LIS的处理
如果a 比LIS中的所有数都要大的话， 把数组的长度 + 1
如果不是,找到数组中比它大的最小的数，把它替换掉
查找的过程可以使用二分查找

注意点：这里的LIS并不是能够使用的最长递归子序列的结果
如2 8 9 3 5
i = 0 LIS = {2}
i = 1 LIS = {2,8}
i = 2 LIS = {2,8,9}
i = 3 LIS = {2,3,8} 这里可以看到这个结果在递增子序列中并不存在
i = 4 LIS = {2,3,5} 
```

```
public class T300_2 {
    public int lengthOfLIS(int[] nums) {
        int[] d = new int[nums.length];
        int len = 1;
        d[len] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if(nums[i] > d[len]){
                d[++len] = nums[i];
            }else {
                // 找到满足d[j] < nums[i] 且 d[j+1] > nums[i]
                int l = 0;
                int r = len;
                int pos = 0;
                while(l <= r){
                    int mid = (l + r) / 2;
                    if(d[mid] < nums[i]){
                        pos = mid;
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                d[pos + 1] = nums[i];
            }
        }
        return len;
    }

    public static void main(String[] args) {
        T300_2 t = new T300_2();
        int res = t.lengthOfLIS(new int[]{2,8,9,3,5});
        System.out.println(res);
    }
}
```

#### 322 零钱兑换
给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。


这里需要注意：案例中硬币[1,2,5]的情况是可以使用贪心求解的，即能够取最大面值的硬币就取最大面值的硬币。但是由于任何一个数使用大面值的硬币一定比使用小面值的硬币少。但是当硬币为[1,6,10]时,如果需要12,选择了10之后只能在选择1，需要3个硬币。但是选择2个6，也可以拼成12.所以这里不能使用贪心来求解

这里可以和台阶问题一样处理，把总金额看出总台阶数。

dp[i] = min(dp[i-coins[j]] + 1)

```
class Solution {
    public int coinChange(int[] coins, int amount) {
        if (amount == 0) {
            return 0;
        }
        int[] dp = new int[amount + 1];
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            int min = amount + 1;
            for (int j = 0; j < coins.length; j++) {
                if (coins[j] <= i) {
                    int v = dp[i - coins[j]] + 1;
                    if (v < min) {
                        min = v;
                    }
                }
            }
            dp[i] = min;
        }
        return dp[amount] <= amount ? dp[amount] : -1;
    }
}
```

